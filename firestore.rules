rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function validateString(value, minLen, maxLen) {
      return value is string && value.size() >= minLen && value.size() <= maxLen;
    }
    
    function validateTimestamp(value) {
      return value is timestamp;
    }
    
    // Notes collection - users can only access their own notes
    match /notes/{noteId} {
      // Allow reading if authenticated user owns the note
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Allow creating if authenticated and userId matches auth
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && validateString(request.resource.data.content, 1, 100000)
        && validateString(request.resource.data.subject, 1, 100)
        && validateTimestamp(request.resource.data.timestamp)
        && request.resource.data.keys().hasAll(['userId', 'content', 'subject', 'timestamp']);
      
      // Allow updating if authenticated user owns the note
      allow update: if isAuthenticated() 
        && resource.data.userId == request.auth.uid
        && request.resource.data.userId == request.auth.uid
        && validateString(request.resource.data.content, 1, 100000)
        && validateString(request.resource.data.subject, 1, 100);
      
      // Allow deleting if authenticated user owns the note
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Flashcards collection - users can only access their own flashcards
    match /flashcards/{cardId} {
      // Allow reading if authenticated user owns the flashcard
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Allow creating if authenticated and userId matches auth
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid
        && validateString(request.resource.data.term, 1, 500)
        && validateString(request.resource.data.definition, 1, 2000)
        && validateString(request.resource.data.noteId, 1, 100)
        && request.resource.data.difficulty >= 1
        && request.resource.data.difficulty <= 5
        && validateTimestamp(request.resource.data.nextReview)
        && validateTimestamp(request.resource.data.createdAt)
        && request.resource.data.keys().hasAll(['userId', 'noteId', 'term', 'definition', 'difficulty', 'nextReview', 'createdAt']);
      
      // Allow updating if authenticated user owns the flashcard
      allow update: if isAuthenticated()
        && resource.data.userId == request.auth.uid
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.difficulty >= 1
        && request.resource.data.difficulty <= 5;
      
      // Allow deleting if authenticated user owns the flashcard
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // User profiles and settings
    match /users/{userId} {
      // Allow reading own profile only
      allow read: if isOwner(userId);
      
      // Allow creating/updating own profile only
      allow write: if isOwner(userId);
      
      // Focus sessions sub-collection
      match /sessions/{sessionId} {
        allow read, write: if isOwner(userId);
      }
      
      // Analytics sub-collection
      match /analytics/{analyticsId} {
        allow read, write: if isOwner(userId);
      }
      
      // Gamification profile (XP, levels, badges)
      match /profile/{docId} {
        allow read, write: if isOwner(userId);
      }
      
      // Canvas LMS settings
      match /canvas/{docId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
